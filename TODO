Commit Message

[Build System]
* Build-Script support 
* Git Ignore and Attributes
* CMake: Use Macros for Strict compilation and to selectively disable
* CMake: Do not overuse cache variables for CFLAGS CXXFLAGS and Others
* External: Git-subtree for Yaml-Cpp
* CI:VCPKG portfile and control file for End-2-End vcpkg testing
* Do not use embedded runtime headers for developer scenario to speed up builds

[Codegen]
* Put all headers under a stencil subfolder
* Separation of codegen-tests with functional-tests (that utilize the codegen to compile)
* Type declaration
    - Use YAML format for type-declaration. Remove TypeDefinition custom parser+lexer
    - Support for Mutators and Accessors in FieldTypes and Containers
    - New: Auto + void
    - More Formal Declaration for Struct, Interface, TypeDef, Union Type-Declaration Properties
    - Fork out Database related types into its own file
    - TODO: Separate the Type declaration out from ModelGenerator.cpp into separate file and clean it up a little
* IDL
    - Un-const-ify Interfaces for more freedom on implementation and avoid ugly mutables
    - Added new Mutator and Accessor Types to FieldType and Containers
* Template
    - Generate FieldCount
    - [WIP] Mutators and Accessors
    - [Alpha] Observable and Optional: get_FieldName + set_FieldName to allow extensions and integration with Observable + OptionalProps
    - [Alpha] new isset_Field
    - [Alpha] Equality comparision code-generation
    - [Alpha] DeltaTracker code-generation for structs
    - Function-args have get_carg fetching contant arg
* Evaluation
    - Thread-local Binding Context that applies to all Expression evaluations
    - Expression evaluations throughout have a lot more context without plumbing
* Support for std::array 
* Debugging support and better messaging
    - ActionContext and ErrorAggregators
    - Stringification of some objects (expressions, value)


[Runtime]
* Headers are now installed and used from under a stencil folder
    - Added a single header for everything (stencil.h) for easy access to Runtime
    - 
* [New] Observable and optional fields
    - [Alpha] DeltaTracker for tracking changes [Maybe it should be DataRecorder]
    - [Alpha] ObservableProps with support for notification and change tracking
    - [Alpha] Optional fields (with support for isset, per fields)
* [New] Timestamped Attribute for structs
* [New] DataRecorder
    - [Incubate-for-Base] New Writer + Reader Interfaces for abstrating out io-streams
    - [Incubate-for-Base] Binary-Ser-Des to be used for compact binary ser-des during patch generation
    - [Incubate-for-Base] Visitor Interface for StateTracker replacement
    - [Alpha] PatchHandler for writing/applying binary patches for object edits
    - [Alpha] DataRecorder and DataPlayer to record and playback object patches
* [New] Mutators and Accessors
    - [WIP] Handler Base for specializations - corresponds to type-declaration names
* Base
    - Equality comparison through template specialization and in type-traits
    - Reflection::TypeTraits: addtional types: std::array, time_point
    - Value: Support for additional int + uint types
    - StateTracker deprecated 
        - Visitor now under development
        - Stringify suppport in StateTracker
        - Delete defunct StateTracker::StackData

[Codegen-Tests]
* [Bugfix] TestInfra Diff comparison was reversed
* Avid.pidl : arrays, timestamp, relationship

[Runtime-Tests]
* Exception throwing negative testcases disabled under win32 debugger
* DataRecorder for scalars
* Observable and optional fields