/* Service convention
  /class/id/member args
  /class/staticfunc args
 */
 include "Metadata.pidl"

 interface KeywordS
{
// http://localhost/keyword/find?query=passport
	static Keyword Find(Keyword root, string query, string type);
// http://localhost/keyword/create?word=passport&parent=2
	static Keyword Create(string word, Keyword parent = null);
// http://localhost/keyword/3/delete
	int Delete();
// http://localhost/keyword/3/modify?word=photo
    int Modify(string word);
// http://localhost/keyword/3/setparent?parent=2
    int SetParent(Keyword parent = null)
}


interface Content
{
// http://localhost/content/3/addkeyword?keyword=2
	int AddKeyword(Keyword keyword);
// http://localhost/content/3/removekeyword?keyword=2
	int RemoveKeyword(Keyword keyword);
}

interface Search 
{
// http://localhost/search/searchbykeywords?keywords=
	static list<Content> SearchByKeywords(list<Keyword> keywords);
// http://localhost/search/searchbydate?start=20151224&end=20151223
	static list<Content> SearchByDate(i64 startDate, i64 endDate);
}

interface Store 
{
// http://localhost/store/upload
	static DigitalAssetInfo Upload(string file);
// http://localhost/store/download?content=3
	static string Download(Content content);
}

/*interface namespace Keywords 
{
	Keywords List(string match);
	Keyword  Create(string word, Keyword parent = null);
	Keyword  Get(Id<Keyword> id);
	Keyword  Modify(string newword);
};

interface object Keywords 
{
	void Delete();
};

interface object Entities 
{
	void Delete();
};

interface namespace Entities 
{
	Entities List(string match);
	Entity  Create(string word, Entity parent = null);
	Entity  Get(Id<Entity> id);
	Entity  Modify(string newword);
};

interface object DigitalAssetInfo 
{
	void ApplyKeyword(Keyword keyword);
	void ClearKeyword(Keyword keyword);
	void ApplyLocation(Location location);
};

interface namespace Search 
{
	list<DigitalAssetInfo> SearchByKeywords(list<Keywords> keywords);
	list<DigitalAssetInfo> SearchByArea(list<GeographicalArea> area);
	list<DigitalAssetInfo> SearchByDate(DateTime start, DateTime end);
};

interface namespace Store 
{
	DigitalAssetInfo Upload(pathinfile file);
	FileStream Download(DigitalAssetInfo);
};*/